// Generated by CoffeeScript 1.3.3
(function() {
  var Ball, GAME_HEIGHT, GAME_STATE_LOST, GAME_STATE_PLAYING, GAME_STATE_SPLASH, GAME_WIDTH, GUTTER, Paddle, Sound, Sprite, Text, art_heading, art_text, background, ball, beep, canvas, cpu, ctx, current_time, draw, game_state, getAnimationFrame, play_text, player, plop, pong_text, programming_heading, programming_text1, programming_text2, reset_text, timer_text, touchOrClick, you_lose_text,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  GAME_STATE_SPLASH = 1;

  GAME_STATE_PLAYING = 2;

  GAME_STATE_LOST = 3;

  game_state = GAME_STATE_SPLASH;

  current_time = 0;

  canvas = document.getElementById("game");

  GAME_HEIGHT = canvas.height;

  GAME_WIDTH = canvas.width;

  GUTTER = 20;

  ctx = canvas.getContext("2d");

  Text = (function() {

    function Text(context, text, x, y, size) {
      this.context = context;
      this.text = text;
      this.x = x;
      this.y = y;
      this.size = size;
    }

    Text.prototype.draw = function() {
      this.context.font = this.size + ' bold Arial';
      this.context.fillStyle = '#20ff1b';
      return this.context.fillText(this.text, this.x, this.y);
    };

    Text.prototype.updateText = function(text) {
      this.text = text;
    };

    return Text;

  })();

  Sprite = (function() {

    function Sprite(path, context, x, y, speed) {
      var _this = this;
      this.path = path;
      this.context = context;
      this.x = x;
      this.y = y;
      this.speed = speed;
      this.bounds = {
        left: 0,
        right: 0,
        top: 0,
        bottom: 0
      };
      this.initial_x = this.x;
      this.initial_y = this.y;
      this.initial_speed = this.speed;
      this.image = new Image();
      this.image.src = this.path;
      this.image.onload = function() {
        _this.width = _this.image.width;
        _this.height = _this.image.height;
        _this.bounds.bottom = (GAME_HEIGHT - GUTTER) - _this.height;
        _this.bounds.right = GAME_WIDTH - _this.width;
        return _this.bounds.top = GUTTER;
      };
    }

    Sprite.prototype.draw = function() {
      return this.context.drawImage(this.image, this.x, this.y);
    };

    Sprite.prototype.collides = function(item) {
      var bottom1, bottom2, left1, left2, right1, right2, top1, top2;
      left1 = this.x;
      left2 = item.x;
      right1 = this.x + this.width;
      right2 = item.x + item.width;
      top1 = this.y;
      top2 = item.y;
      bottom1 = this.y + this.height;
      bottom2 = item.y + item.height;
      if (bottom1 < top2 || top1 > bottom2 || right1 < left2 || left1 > right2) {
        return false;
      }
      return true;
    };

    return Sprite;

  })();

  Paddle = (function(_super) {

    __extends(Paddle, _super);

    function Paddle() {
      return Paddle.__super__.constructor.apply(this, arguments);
    }

    Paddle.prototype.move = function(y) {
      if (y > this.bounds.top && y < this.bounds.bottom) {
        return this.y = y;
      }
    };

    return Paddle;

  })(Sprite);

  Ball = (function(_super) {

    __extends(Ball, _super);

    function Ball() {
      this.velocity = {
        x: 1,
        y: 1
      };
      this.initial_velocity = this.velocity;
      Ball.__super__.constructor.apply(this, arguments);
    }

    Ball.prototype.reset = function() {
      this.x = this.initial_x;
      this.y = this.initial_y;
      this.speed = this.initial_speed;
      this.velocity.x = 1;
      this.velocity.y = 1;
      game_state = GAME_STATE_PLAYING;
      return current_time = 0;
    };

    Ball.prototype.move = function() {
      this.x += this.speed * this.velocity.x;
      return this.y += this.speed * this.velocity.y;
    };

    Ball.prototype.draw = function() {
      if (this.collides(cpu)) {
        this.x = cpu.x - this.width;
        this.velocity.x *= -1;
        beep.play();
      }
      if (this.collides(player)) {
        this.x = (player.x + player.width) - 1;
        this.velocity.x *= -1;
        beep.play();
      }
      if (this.y < this.bounds.top || this.y > this.bounds.bottom) {
        this.velocity.y *= -1;
        plop.play();
      }
      if ((this.x + this.width) < 0) {
        game_state = GAME_STATE_LOST;
      }
      return Ball.__super__.draw.apply(this, arguments);
    };

    return Ball;

  })(Sprite);

  Sound = (function() {

    function Sound(path) {
      this.path = path;
      this.sound = new Audio();
      this.sound.src = this.path;
    }

    Sound.prototype.play = function() {
      return this.sound.play();
    };

    return Sound;

  })();

  background = new Sprite("images/background.png", ctx, 0, 0);

  player = new Paddle("images/player.png", ctx, 20, (GAME_HEIGHT / 2) - 30);

  cpu = new Paddle("images/player.png", ctx, (GAME_WIDTH - 14) - 20, (GAME_HEIGHT / 2) - 30);

  ball = new Ball("images/ball.png", ctx, (GAME_WIDTH / 2) - 8, (GAME_HEIGHT / 2) - 8, 5);

  beep = new Sound("audio/beep.ogg");

  plop = new Sound("audio/plop.ogg");

  pong_text = new Text(ctx, 'PONG', 72, 90, '50px');

  play_text = new Text(ctx, 'Tap to play', 90, 130, '20px');

  art_heading = new Text(ctx, 'ART AND SOUND', 260, 130, '20px');

  art_text = new Text(ctx, 'opengameart.org', 280, 155, '20px');

  programming_heading = new Text(ctx, 'PROGRAMMING', 260, 210, '20px');

  programming_text1 = new Text(ctx, 'Burke Holland', 280, 235, '20px');

  programming_text2 = new Text(ctx, 'Kyle Davis', 280, 255, '20px');

  timer_text = new Text(ctx, 'timer', 400, 300, '20px');

  you_lose_text = new Text(ctx, 'GAME   OVER', 72, 90, '50px');

  reset_text = new Text(ctx, 'Tap to reset', 90, 130, '20px');

  draw = function() {
    background.draw();
    player.draw();
    cpu.draw();
    if (game_state === GAME_STATE_SPLASH) {
      pong_text.draw();
      play_text.draw();
      art_heading.draw();
      art_text.draw();
      programming_heading.draw();
      programming_text1.draw();
      programming_text2.draw();
    }
    if (game_state === GAME_STATE_PLAYING) {
      ball.draw();
      ball.move();
      cpu.move(ball.y);
      timer_text.draw();
    }
    if (game_state === GAME_STATE_LOST) {
      you_lose_text.draw();
      reset_text.draw();
      timer_text.draw();
    }
    return getAnimationFrame()(draw, canvas);
  };

  setInterval(function() {
    return ball.speed += .2;
  }, 1000);

  setInterval(function() {
    if (game_state === GAME_STATE_PLAYING) {
      current_time += .1;
      return timer_text.updateText(current_time.toFixed(1));
    }
  }, 100);

  getAnimationFrame = function() {
    return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function(callback, element) {
      return window.setTimeout(callback, 1000 / 60);
    };
  };

  document.body.addEventListener('mousemove', function(event) {
    if (game_state === GAME_STATE_PLAYING) {
      return player.move(event.y - (player.height / 2));
    }
  }, false);

  document.body.addEventListener('click', function(event) {
    return touchOrClick();
  });

  document.body.addEventListener('touchend', function(event) {
    return touchOrClick();
  });

  touchOrClick = function() {
    if (game_state === GAME_STATE_SPLASH) {
      ball.reset();
      game_state = GAME_STATE_PLAYING;
    }
    if (game_state === GAME_STATE_LOST) {
      return ball.reset();
    }
  };

  draw();

}).call(this);
